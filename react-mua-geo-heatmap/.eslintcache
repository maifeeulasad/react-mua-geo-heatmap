[{"/home/mua/Desktop/react-mua-geo-heatmap/react-mua-geo-heatmap/src/reportWebVitals.js":"1","/home/mua/Desktop/react-mua-geo-heatmap/react-mua-geo-heatmap/src/component/GeoHeatmap.js":"2","/home/mua/Desktop/react-mua-geo-heatmap/react-mua-geo-heatmap/src/index.js":"3"},{"size":362,"mtime":1612107737507,"results":"4","hashOfConfig":"5"},{"size":3449,"mtime":1612184183710,"results":"6","hashOfConfig":"5"},{"size":769,"mtime":1612167697919,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"g61qhj",{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/mua/Desktop/react-mua-geo-heatmap/react-mua-geo-heatmap/src/reportWebVitals.js",[],"/home/mua/Desktop/react-mua-geo-heatmap/react-mua-geo-heatmap/src/component/GeoHeatmap.js",["15"],"import React from 'react';\n\nclass GeoHeatmap extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state={\n            canvas: null,\n            canvasContext: null,\n            heatSequenceColors: [\n                [255,0,0],[0,255,0],[0,0,255]\n            ]\n        }\n    }\n\n    setCanvas = (elem) => {\n        this.setState({\n            canvas: elem,\n            canvasContext: elem.getContext('2d')\n        },()=>this.drawData())\n    }\n\n    componentDidMount() {\n        //this.drawData();\n    }\n\n    getColor = (input) => {\n        let indexFloat = (this.state.heatSequenceColors.length*input)/255;\n        let indexFloor = Math.floor(indexFloat);\n        let indexCeil = Math.ceil(indexFloat);\n        if(indexFloor<0){\n            indexFloor = 0;\n        }else if(indexFloor>=this.state.heatSequenceColors.length){\n            indexFloor = this.state.heatSequenceColors.length-1;\n        }\n        if(indexCeil<0){\n            indexCeil = 0;\n        }else if(indexCeil>=this.state.heatSequenceColors.length){\n            indexCeil = this.state.heatSequenceColors.length-1;\n        }\n        let ratio = indexFloat - indexFloor;\n        return this.state.heatSequenceColors[indexFloor].map((c,i)=>{\n            let weightedAvg = (c*ratio+this.state.heatSequenceColors[indexCeil][i]*(1-ratio))/2;\n            return parseInt(Math.round(weightedAvg).toString());\n        })\n    }\n\n    drawData = () => {\n        for (let i = 0; i < this.props.data.length; i++) {\n            let p = this.props.data[i];\n            this.state.canvasContext.beginPath();\n            let color = 'rgba(0,0,0,255)';\n            let gradient\n                = this\n                .state\n                .canvasContext\n                .createRadialGradient(0, 0, p[2] / 5, 0, 0, p[2]);\n            gradient.addColorStop(0, color);\n            gradient.addColorStop(1, 'rgba(255,255,255,0)');\n\n            this.state.canvasContext.fillStyle = gradient;\n\n            this.state.canvasContext.setTransform(1, 0, 0, 1, p[0], p[1]);\n            this.state.canvasContext.beginPath();\n            this\n                .state\n                .canvasContext\n                .arc(0, 0, p[2], 0, 2 * Math.PI, false);\n            this.state.canvasContext.fill();\n        }\n        let gradient = this\n            .state\n            .canvasContext\n            .getImageData(0, 0, this.props.width, this.props.height)\n        gradient = this.colorData(gradient)\n        this.state.canvasContext.putImageData(gradient, 0, 0,0,0,this.props.width, this.props.height);\n    }\n\n    colorData = (gradient) => {\n        console.log(gradient)\n        for(let i=0;i<gradient.data.length;i+=4){\n            let r = gradient.data[i];\n            let g = gradient.data[i+1];\n            let b = gradient.data[i+2];\n            let gray = r*0.3 + g*0.59 + b*0.11;\n            let a = gradient.data[i+3];\n            let actualGray = (gray * (255-a)) / 255;\n            let color = this.getColor(actualGray);\n            gradient.data[i]=color[0];\n            gradient.data[i+1]=color[1];\n            gradient.data[i+2]=color[2];\n        }\n        console.log(gradient)\n        return gradient;\n    }\n\n    render(){\n        return(\n            <canvas\n                className={\"background\"}\n                ref={this.setCanvas}\n                width={this.props.width}\n                height={this.props.height}/>\n        )\n    }\n\n}\n\nexport default GeoHeatmap;","/home/mua/Desktop/react-mua-geo-heatmap/react-mua-geo-heatmap/src/index.js",[],{"ruleId":"16","severity":1,"message":"17","line":61,"column":13,"nodeType":"18","endLine":61,"endColumn":37},"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression"]